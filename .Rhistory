# rstan for Mondo.sub
# the last line shows theta values for the 12 items, the ordering
# of theta roughly agrees with that by "ratings", but opposite signs
Mondo.sub <- Mondo[apply(!is.na(Mondo), 1, sum) >= 5, ]
Mondo.sub <- Mondo.sub[,apply(is.na(Mondo.sub), 2, mean) != 1]
dim(Mondo.sub)  # [1]  232 1344
Mondo.sub[is.na(Mondo.sub)]<-0
library(rstan)
fit1 <- stan(file = "Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 1, # number of Markov Chains
warmup = 10, # number of warmup iterations per chain
iter = 20, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
Mondo.sub <- Mondo[apply(!is.na(Mondo), 1, sum) >= 5, ]
Mondo.sub <- Mondo.sub[,apply(is.na(Mondo.sub), 2, mean) != 1]
dim(Mondo.sub)  # [1]  232 1344
Mondo.sub[is.na(Mondo.sub)]<-0
library(rstan)
fit1 <- stan(file = "Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 1, # number of Markov Chains
warmup = 10, # number of warmup iterations per chain
iter = 20, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
print(fit1, pars=c("theta", "alpha", "beta", "gamma"), probs=c(.1,.5,.9))
d<-as.data.frame(summary(fit1))
d
# rstan for Mondo.sub
# the last line shows theta values for the 12 items, the ordering
# of theta roughly agrees with that by "ratings", but opposite signs
Mondo.sub <- Mondo[apply(!is.na(Mondo), 1, sum) >= 5, ]
Mondo.sub <- Mondo.sub[,apply(is.na(Mondo.sub), 2, mean) != 1]
dim(Mondo.sub)  # [1]  232 1344
Mondo.sub[is.na(Mondo.sub)]<-0
library(rstan)
fit1 <- stan(file = "Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 500, # number of Markov Chains
warmup = 10, # number of warmup iterations per chain
iter = 20, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
print(fit1, pars=c("theta", "alpha", "beta", "gamma"), probs=c(.1,.5,.9))
d<-as.data.frame(summary(fit1))
d
load("S:/502/project/Mondo.rda")
# rstan for Mondo.sub
# the last line shows theta values for the 12 items, the ordering
# of theta roughly agrees with that by "ratings", but opposite signs
Mondo.sub <- Mondo[apply(!is.na(Mondo), 1, sum) >= 5, ]
Mondo.sub <- Mondo.sub[,apply(is.na(Mondo.sub), 2, mean) != 1]
dim(Mondo.sub)  # [1]  232 1344
Mondo.sub[is.na(Mondo.sub)]<-0
library(StanHeaders)
library(ggplot2)
library(rstan)
fit1 <- stan(file = "S:/502/project/Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 1, # number of Markov Chains
warmup = 10, # number of warmup iterations per chain
iter = 20, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
library(StanHeaders)
library(ggplot2)
library(rstan)
print(fit1, pars=c("theta", "alpha", "beta", "gamma"), probs=c(.1,.5,.9))
d<-as.data.frame(summary(fit1))
d
fit1 <- stan(file = "S:/502/project/Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 1, # number of Markov Chains
warmup = 1, # number of warmup iterations per chain
iter = 2, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
fit1 <- stan(file = "S:/502/project/Mondo.stan", # Stan program
data = list(K=5,d1=232,d2=1344,y=Mondo.sub,gamma1=0), # named list of data
chains = 1, # number of Markov Chains
warmup = 10, # number of warmup iterations per chain
iter = 20, # total number of iterations per chain
cores = 16, # number of cores
refresh = 1 #show progress every 'refresh' iterations
)
print(fit1, pars=c("theta", "alpha", "beta", "gamma"), probs=c(.1,.5,.9))
d<-as.data.frame(summary(fit1))
d
View(d)
View(d)
View(d)
View(d)
install.packages("S:/502/Ratings.zip", repos = NULL, type = "win.binary")
library("rateing")
library("rating")
library("ratings")
library("Ratings")
library(Ratings)
library(Rating)
library(Ratings)
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
library(StanHeaders)
library(ggplot2)
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
load("S:/502/project/Mondo.rda")
Mondo.sub <- Mondo[apply(!is.na(Mondo), 1, sum) >= 5, ]
Mondo.sub <- Mondo.sub[,apply(is.na(Mondo.sub), 2, mean) != 1]
dim(Mondo.sub)  # [1]  232 1344
Mondo.sub[is.na(Mondo.sub)]<-0
library(rstan)
stan_code="
data {
int K;
int d1;
int d2;
int y[d1,d2];
real gamma1;
}
parameters {
real alpha[d1];
real beta[d1];
real theta[d2];
positive_ordered[K-2] gamma;
}
model {
vector[K] theta1;
for(i in 1:d1){
alpha[i]~normal(1,1);
beta[i]~normal(1,20);
}
for(j in 1:d2){
theta[j]~normal(0,1);
}
for(i in 1:d1){
for(j in 1:d2){
if(y[i][j]>0){
real eta;
eta<-alpha[i]+beta[i]*theta[j];
theta1[1]<-(1-Phi(eta-gamma1));
theta1[2] <- Phi(eta - gamma1) - Phi(eta - gamma[1]);
theta1[3] <- Phi(eta - gamma[1]) - Phi(eta - gamma[2]);
theta1[4] <- Phi(eta - gamma[2]) - Phi(eta - gamma[3]);
theta1[5] <- Phi(eta - gamma[3]);
y[i][j]~categorical(theta1);
}
}
}
}
"
mix_model=stan_model(model_code=stan_code)
fit=sampling(mix_model,data=list(K=5,d1=1000,d2=500,y=dataset1,gamma1=0),iter = 1) # 5000
d<-as.data.frame(summary(fit))
# Synthetic dataset1 cleaning
dataset1 <- read_excel("Dataset 1.xlsx")
dataset1 <- dataset1[, -1]
dim(dataset1)
dataset1[is.na(dataset1)]<-0 # 0 means missing values
# Synthetic dataset1 cleaning
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- dataset1[, -1]
dim(dataset1)
dataset1[is.na(dataset1)]<-0 # 0 means missing values
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- read_excel("Dataset1.xlsx")
# Synthetic dataset1 cleaning
dataset1 <- read_excel("Dataset1.xlsx")
dataset1 <- dataset1[, -1]
dim(dataset1)
dataset1[is.na(dataset1)]<-0 # 0 means missing values
